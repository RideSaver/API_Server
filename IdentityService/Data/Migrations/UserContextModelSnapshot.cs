// <auto-generated />
using System;
using IdentityService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityService.Data.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataAccess.DataModels.AuthorizationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ServiceToken")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("Authorizations");
                });

            modelBuilder.Entity("DataAccess.DataModels.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DataAccess.DataModels.RideHistoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserModelId");

                    b.ToTable("RideHistory");
                });

            modelBuilder.Entity("DataAccess.DataModels.ServiceAreaModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ServicesModelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ServicesModelId");

                    b.ToTable("ServiceAreas");
                });

            modelBuilder.Entity("DataAccess.DataModels.ServiceFeaturesModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Feature")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServicesModelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ServicesModelId");

                    b.ToTable("ServiceFeatures");
                });

            modelBuilder.Entity("DataAccess.DataModels.ServicesModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DataAccess.DataModels.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.DataModels.AuthorizationModel", b =>
                {
                    b.HasOne("DataAccess.DataModels.UserModel", null)
                        .WithMany("Authorizations")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.DataModels.RefreshToken", b =>
                {
                    b.HasOne("DataAccess.DataModels.UserModel", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.DataModels.RideHistoryModel", b =>
                {
                    b.HasOne("DataAccess.DataModels.ServicesModel", "ServicesModel")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.DataModels.UserModel", null)
                        .WithMany("RideHistory")
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicesModel");
                });

            modelBuilder.Entity("DataAccess.DataModels.ServiceAreaModel", b =>
                {
                    b.HasOne("DataAccess.DataModels.ServicesModel", null)
                        .WithMany("ServiceArea")
                        .HasForeignKey("ServicesModelId");
                });

            modelBuilder.Entity("DataAccess.DataModels.ServiceFeaturesModel", b =>
                {
                    b.HasOne("DataAccess.DataModels.ServicesModel", null)
                        .WithMany("ServiceFeatures")
                        .HasForeignKey("ServicesModelId");
                });

            modelBuilder.Entity("DataAccess.DataModels.ServicesModel", b =>
                {
                    b.Navigation("ServiceArea");

                    b.Navigation("ServiceFeatures");
                });

            modelBuilder.Entity("DataAccess.DataModels.UserModel", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("RefreshTokens");

                    b.Navigation("RideHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
