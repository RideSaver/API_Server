// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicesAPI.Data;

#nullable disable

namespace ServicesAPI.Data.Migrations
{
    [DbContext(typeof(ServiceContext))]
    [Migration("20221214125521_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("DataAccess.DataModels.ProviderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("providers");
                });

            modelBuilder.Entity("DataAccess.DataModels.ServicesModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("services");
                });

            modelBuilder.Entity("DataAccess.DataModels.ServicesModel", b =>
                {
                    b.HasOne("DataAccess.DataModels.ProviderModel", "ProviderModel")
                        .WithMany("Services")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DataAccess.DataModels.ServiceAreaModel", "ServiceArea", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("ServicesModelId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("ServicesModelId");

                            b1.ToTable("service_areas");

                            b1.WithOwner()
                                .HasForeignKey("ServicesModelId");
                        });

                    b.OwnsMany("DataAccess.DataModels.ServiceFeaturesModel", "ServiceFeatures", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Feature")
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("ServicesModelId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("ServicesModelId");

                            b1.ToTable("service_features");

                            b1.WithOwner()
                                .HasForeignKey("ServicesModelId");
                        });

                    b.Navigation("ProviderModel");

                    b.Navigation("ServiceArea");

                    b.Navigation("ServiceFeatures");
                });

            modelBuilder.Entity("DataAccess.DataModels.ProviderModel", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
